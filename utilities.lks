include('/weapon');
include('/chip');
include('/summon');

function init(){
    debugC("init", COLOR_BLUE);
    var chips = getChips();
    setRegister("canSummon", true);
    setRegister("bestDamageChip", bestChip(chips, EFFECT_DAMAGE));
    setRegister("bestDamageRangeChip", bestRangeChip(chips, EFFECT_DAMAGE));
    setRegister("bestForceChip", bestChip(chips, EFFECT_BUFF_STRENGTH));
    setRegister("bestAgilityChip", bestChip(chips, EFFECT_BUFF_AGILITY));
    // setRegister("bestSummonChip", bestChip(chips, EFFECT_SUMMON));
    setRegister("useChipDamage", true);
}

function statistics(){
    debugC("statistics", COLOR_BLUE);
    // debugC("statistics", COLOR_BLUE);
    // var startNumOpe = getOperations();
    //var enemies = getEnemies();
    //for(var enemy in enemies){
    //if(enemy != null){
    //for(var weapon in getWeapons(enemy)){
    //var weaponName = "e_"+getWeaponName(weapon);
    //setRegister(weaponName, number(getRegister(weaponName) != null ? getRegister(weaponName) : 0)+1);
    //}
    //for(var chip in getChips(enemy)){
    //var chipName = "e_"+getChipName(chip);
    //setRegister(chipName, number(getRegister(chipName) != null ? getRegister(chipName) : 0)+1);
    //}
    //}
    //}
    //var allies = getAllies();
    //for(var ally in allies){
    //if(ally != null && ally != getLeek()){
    //for(var weapon in getWeapons(ally)){
    //var weaponName = "a_"+getWeaponName(weapon);
    //setRegister(weaponName, number(getRegister(weaponName) != null ? getRegister(weaponName) : 0)+1);
    //}
    //for(var chip in getChips(ally)){
    //var chipName = "a_"+getChipName(chip);
    //setRegister(chipName, number(getRegister(chipName) != null ? getRegister(chipName) : 0)+1);
    //}
    //}
    //}
    if(getRegister("lowestTotalOperationsCost")==null || number(getRegister("lowestTotalOperationsCost")) > getOperations())
    setRegister("lowestTotalOperationsCost", getOperations());
    if(getRegister("highestTotalOperationsCost")==null || number(getRegister("highestTotalOperationsCost")) < getOperations())
    setRegister("highestTotalOperationsCost", getOperations());
    // debug("statistics cost : "+(getOperations() - startNumOpe)+" operations");
}

function actionAttack(leek, enemy){
    debugC("actionAttack", COLOR_BLUE);
    //if(null !== getWeapon())
    //	equipWeapon(getBestWeapon(enemy));
    var bestDamageChip = number(getRegister("bestDamageChip"));
    var bestDamageRangeChip = number(getRegister("bestDamageRangeChip"));
    //while (getTP() > 0) {
    if(null === enemy){
        enemy = getMyEnemy();
    }
    equipWeapon(getBestWeapon(enemy));
    var canUseCurrentWeapon = canUseWeapon(getWeapon(), enemy) && getTP() >= getWeaponCost(getWeapon());
    var canUseBestDamageChip = canUseChip(bestDamageChip, enemy) && getRegister("useChipDamage") && getTP() >= getChipCost(bestDamageChip);
    var canUseBestDamageRangeChip = canUseChip(bestDamageRangeChip, enemy) && getRegister("useChipDamage") && getTP() >= getChipCost(bestDamageRangeChip);
    if(canUseCurrentWeapon){
        actionAttackWithWeapon(leek, enemy);
        actionAttack(leek, enemy);
    }else if(!canUseCurrentWeapon && canUseBestDamageChip){
        actionAttackWithChip(leek, enemy, bestDamageChip);
        actionAttack(leek, enemy);
    }else if(!canUseCurrentWeapon && canUseBestDamageRangeChip){
        actionAttackWithChip(leek, enemy, bestDamageRangeChip);
        actionAttack(leek, enemy);
    }else if((shouldIMoveToAttack(leek, enemy) || (isAlive(enemy) && getPathLength(getCell(), getCell(enemy)) > 8)) && getMP() > 0 && !canUseCurrentWeapon && !canUseBestDamageChip && !canUseBestDamageRangeChip && isTPsAvailableForFight([getWeapon(), bestDamageChip, bestDamageRangeChip])){
        moveToward(enemy, 1);
        actionAttack(leek, enemy);
    }else{
        debug("No move toward");
        return;
    }
    //}
}

function actionRunAway(enemy){
    debugC("actionRunAway", COLOR_BLUE);
    if(isAlive(enemy)){
        if(isOnSameLine(getCell(), getCell(enemy))){
            moveAwayFromLine(getCell(), getCell(enemy));
        }else{
            moveAwayFromLeeks(getEnemies());
        }
    }
}

function shouldIMoveToAttack(leek, enemy){
    debugC("shouldIMoveToAttack", COLOR_BLUE);
    var sIMTA = false;
    var myCell = getCell();
    for(var weapon in getWeapons()){
        var cellsToUseWeapon = getCellsToUseWeapon(weapon, enemy);
        for(var cell in cellsToUseWeapon){
            if(getPathLength(myCell, cell) <= getMP() && null === getCellContent(cell) && !isEmpty(getPath(myCell, cell)))
            return sIMTA = true;
        }
    }
    if(getRegister("useChipDamage")){
        for(var chip in getChips()){
            var e = getChipEffects(chip);
            if (e[0][0] == EFFECT_DAMAGE) {
                var cellsToUseChip = getCellsToUseChip(chip, enemy);
                for(var cell in cellsToUseChip){
                    if(getPathLength(myCell, cell) <= getMP() && null === getCellContent(cell) && !isEmpty(getPath(myCell, cell)))
                    return sIMTA = true;
                }
            }
        }
    }
    return sIMTA;
}

function actionHeal(leek){
    debugC("actionHeal", COLOR_BLUE);
    if(getLife()<getTotalLife()){
        var chips = getChips();
        var chipsHeal = [];
        for (var i = 0; i < count(chips);i++) {
            var e = getChipEffects(chips[i]);
            if (e[0][0] == EFFECT_HEAL) {
                chipsHeal[count(chipsHeal)] = chips[i];
            }
        }
        var chipHeal = bestChip(chipsHeal, EFFECT_HEAL);
        while(!isEmpty(chipsHeal) && chipHeal!=null && getTP()>=getChipCost(chipHeal) && canUseChip(chipHeal, leek)){
            useChip(chipHeal,leek);
            removeElement(chipsHeal, chipHeal);
            chipHeal = bestChip(chipsHeal, EFFECT_HEAL);
        }
    }
}

function actionAttackWithWeapon(leek, enemy){
    debugC("actionAttackWithWeapon", COLOR_BLUE);
    while(enemy != null && getTP() >= getWeaponCost(getWeapon())
    && isAlive(enemy) && canUseWeapon(enemy) ){
        useWeapon(enemy);
        if(!isAlive(enemy)){
            enemy = getMyEnemy();
        }
    }
}

function actionAttackWithChip(leek, enemy, chipDamage){
    debugC("actionAttackWithChip", COLOR_BLUE);
    var enemyLifeBeforeChipEffect = getLife(enemy);
    while(null !== enemy && getTP() >= getChipCost(chipDamage)
    && isAlive(enemy) && canUseChip(chipDamage, enemy)
    && getRegister("useChipDamage")){
        useChip(chipDamage, enemy);
        if(!isAlive(enemy)){
            enemy = getMyEnemy();
        }
        if(enemyLifeBeforeChipEffect === getLife(enemy)){
            debug("useChipDamage : false");
            setRegister("useChipDamage", false);
            return;
        }
    }
}

function getWeakestEnemy(){
    debugC("getWeakestEnemy", COLOR_BLUE);
    var enemies = getAliveEnemies();
    var weakestEnemy = null;
    for(var enemy in enemies){
        if(isAlive(enemy)
        && getPathLength(getCell(enemy), getLeek()) <= getMP()
        && !isSummon(enemy)){
            if(null === weakestEnemy){
                weakestEnemy = enemy;
            } else if(null !== weakestEnemy
            && getResistance(weakestEnemy) < getResistance(enemy)){
                weakestEnemy = enemy;
            }
        }
    }
    if(null === weakestEnemy){
        weakestEnemy = getNearestEnemy();
    }
    return weakestEnemy;
}

function getStrongestEnemy(){
    debugC("getStrongestEnemy", COLOR_BLUE);
    var enemies = getEnemies();
    var strongestEnemy = null;

    for(var enemy in enemies){
        if(isAlive(enemy)){
            if(null === strongestEnemy)
            strongestEnemy = enemy;
            else{
                if((getEffects(strongestEnemy)[EFFECT_BUFF_AGILITY]+getEffects(strongestEnemy)[EFFECT_BUFF_AGILITY]) < (getEffects(enemy)[EFFECT_BUFF_AGILITY]+getEffects(enemy)[EFFECT_BUFF_AGILITY]))
                strongestEnemy = enemy;
            }
        }else{
            strongestEnemy = getNearestEnemy();
        }
    }
    return strongestEnemy;
}

function getMyEnemy(){
    debugC("getMyEnemy", COLOR_BLUE);
    var enemy = getWeakestEnemy();
    debug("weakest enemy : "+getName(enemy));
    if(enemy !== null){
        if(getAliveEnemiesCount() === 1
        && count(getAliveAllies()) > 1 && getLife() > getLife(enemy)){
            var pupute = null;
            var myCell = getCell();
            for(var ally in getAliveAllies()){
                if (isAlive(ally) && getFarmerID() !== getFarmerID(ally)){
                    if(null === pupute)
                    pupute = ally;
                    else if(null !== pupute
                    && getPathLength(myCell, getCell(pupute)) > getPathLength(myCell,getCell(ally)))
                    pupute = ally;
                }
            }
            if(null === pupute){
                return enemy;
            }
            say("Puputerie !!!");
            return pupute;
        } else {
            return enemy;
        }
    }
}