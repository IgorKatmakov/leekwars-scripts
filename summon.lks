include("bulb");

global summonsRegisterName = "canSummon";

function getSummonChips(leek){
    debugC("getSummonChips", COLOR_BLUE);
    var summonChips = [];
    for (var key : var chip in getChips(leek)) {
        var e = getChipEffects(chip);
        if (e[0][0] === EFFECT_SUMMON) {
            push(summonChips, chip);
        }
    }
    return arraySort(
    summonChips,
    function (a, b) {
        return getChipCooldown(a) - getChipCooldown(b);
    }
    );
}

function getCellToSummon(leek, chip, enemy){
    debugC("getCellToSummon", COLOR_BLUE);
    var cellToSummon = null;
    for (var cell in getCellsToUseChip(chip, leek)){
        if((cellToSummon === null || (null !== cellToSummon && getPathLength(getCell(), cell) > 1 && getPathLength(getCell(), cell) <= 4 && getPathLength(cellToSummon, getCell(enemy)) > getPathLength(cell, getCell(enemy)))))
        cellToSummon = cell;
    }
    return cellToSummon;
}

function summonBulb(leek, enemy){
    debugC("summonBulb", COLOR_BLUE);
    var cellToSummon = null;
    var summonChips = getSummonChips(leek);
    for (var key : var chip in summonChips) {
        if(null !== chip){
            cellToSummon = getCellToSummon(leek, chip, enemy);
            if(null !== cellToSummon
            && canUseChipOnCell(chip, cellToSummon)
            && getRegister(summonsRegisterName)){
                var summonResult = summon(chip, cellToSummon, bulbKamikazeAI);
                if(summonResult === USE_SUCCESS){
                    setRegister(summonsRegisterName, true);
                }else if (summonResult === USE_TOO_MANY_SUMMONS){
                    setRegister(summonsRegisterName, false);
                }
            }
        }
    }
}
