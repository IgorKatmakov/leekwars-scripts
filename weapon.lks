function isTPsAvailableForFight(weapons){
    debugC("isTPsAvailableForFight", COLOR_BLUE);
    for(var weapon in weapons){
        if(null !== weapon &&
        ((isWeapon(weapon) && getTP() >= getWeaponCost(weapon))
        || (isChip(weapon) && getTP() >= getChipCost(weapon)))){
            return true;
        }
    }
    return false;
}

function getDamageEffect(weapon)
{
    debugC("getDamageEffect", COLOR_BLUE);
    // [type, min, max, turns, targets]
    var effects = getWeaponEffects(weapon);

    for (var i = 0; i < count(effects); i++)
    if (effects[i][0] == EFFECT_DAMAGE)
    return effects[i];

    return null;
}

function getWeaponAverageDamage(weapon)
{
    debugC("getWeaponAverageDamage", COLOR_BLUE);
    var effect = getDamageEffect(weapon);
    return (effect[1] + effect[2]) / 2;
}

function equipWeapon(weapon)
{
    debugC("equipWeapon", COLOR_BLUE);
    if(null !== weapon && getWeapon() !== weapon) {
        debug("WEAPON: " + getWeaponName(weapon));
        setWeapon(weapon);
    }
}

function getBestWeapon(enemy)
{
    debugC("getBestWeapon", COLOR_BLUE);
    var weapons = getWeapons();
    var best = null;
    var bestDamage = 0;
    var bestTurns = 0;

    var tp = getTP();

    var me = getCell();
    var them = getCell(enemy);
    if(null !== them){
        for (var i = 0; i < count(weapons); i++) {
            var cur = weapons[i];

            // check if we can fire this weapon now
            if (isInlineWeapon(cur) and !isOnSameLine(me, them))
            continue;
            // check line of sight
            if (weaponNeedLos(cur) and !lineOfSight(me, them))
            continue;
            // check range
            if (getCellDistance(me, them) > getWeaponMaxRange(cur))
            continue;

            // calculate the damage for this weapon
            var damage = getWeaponAverageDamage(cur); // [type, min, max, ...]
            var switch = (getWeapon() == cur ? 0 : 1); // cost for switch
            var turns = floor((tp - switch) / getWeaponCost(cur));

            damage *= turns;

            debug(getWeaponName(cur) + " would deal " + damage + " damage for " + turns + " turns");
            if (damage > bestDamage)
            {
                bestDamage = damage;
                bestTurns = turns;
                best = cur;
            }
        }
    }

    debugC("BEST: " + getWeaponName(best) + ", with " + bestDamage + " average for " + bestTurns + " turns", COLOR_GREEN);

    return best;
}